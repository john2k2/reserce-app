---
export interface Props {
	title: string;
}

import { getSession } from '../lib/supabase.ts';
import '../styles/animations.css';
import '../styles/fonts.css';

const { title } = Astro.props;

// Verificar si el usuario está autenticado
const { data: sessionData } = await getSession();
const session = sessionData?.session;
const isAuthenticated = !!session;
const userId = session?.user?.id || null;

// Configuración de Supabase para cliente
const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;

// Definir la interfaz para los recursos críticos
interface CriticalResource {
	href: string;
	as: string;
	crossorigin?: string;
}

// Recursos críticos que queremos precargar
const criticalResources: CriticalResource[] = [
	{ href: '/logo.svg', as: 'image' },
	{ href: '/fonts/inter/InterVariable.woff2', as: 'font', crossorigin: 'anonymous' }
];
---

<!doctype html>
<html lang="es" class="light">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		
		<!-- Estado de autenticación disponible para el cliente, pero solo como indicador -->
		<script define:vars={{ isAuthenticated, userId }}>
			window.AUTH_STATE = {
				isAuthenticated: !!isAuthenticated,
				userId: userId || null
			};
		</script>
		
		<script is:inline>
			// Script para manejar el cambio de tema
			const theme = (() => {
				if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
					return localStorage.getItem('theme') || 'light';
				}
				if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
					return 'dark';
				}
				return 'light';
			})();
			
			if (theme === 'dark') {
				document.documentElement.classList.remove('light');
				document.documentElement.classList.add('dark');
			} else {
				document.documentElement.classList.remove('dark');
				document.documentElement.classList.add('light');
			}
			
			window.localStorage.setItem('theme', theme);
		</script>
		
		<!-- Precargar recursos críticos -->
		{criticalResources.map((resource: CriticalResource) => (
			<link 
				rel="preload" 
				href={resource.href} 
				as={resource.as} 
				{...(resource.crossorigin && { crossorigin: resource.crossorigin })}
			/>
		))}
		
		<!-- Establecer políticas de caché para la página -->
		<meta http-equiv="Cache-Control" content="max-age=300" />
		
		<!-- Agregar información para SEO -->
		<meta name="description" content="QueueMaster - La aplicación para gestionar tus filas de espera y representantes de forma eficiente" />
		<meta name="keywords" content="cola, fila, gestión, representantes, citas, reservas" />
		
		<!-- Soporte para PWA -->
		<link rel="manifest" href="/manifest.json" />
		<meta name="theme-color" content="#4338ca" />
	</head>
	<body class="min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200">
		<!-- Contenido principal -->
		<slot />
		
		<!-- Botón de notificaciones e iniciar sesión -->
		<div class="flex items-center space-x-4">
			<!-- Notificaciones -->
			<div class="relative">
				<button id="notifications-button" class="relative z-10 block p-2 bg-gray-800 rounded-full focus:outline-none">
					<svg class="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
					</svg>
				</button>
				<div id="notifications-menu" class="hidden absolute right-0 mt-2 w-80 bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden z-20">
					<!-- Aquí se mostrarán las notificaciones -->
				</div>
			</div>
			<!-- Iniciar sesión -->
			<div class="relative">
				<button id="user-menu-button" class="relative z-10 block p-2 bg-gray-800 rounded-full focus:outline-none">
					<svg class="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5.121 17.804A4.992 4.992 0 0112 15a4.992 4.992 0 016.879 2.804M12 7a4 4 0 110-8 4 4 0 010 8z" />
					</svg>
				</button>
				<div id="user-menu" class="hidden absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden z-20">
					<a href="/login" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-600">Iniciar sesión</a>
				</div>
			</div>
		</div>
		
		
		
		<!-- Unificado los scripts en uno solo para mejorar el rendimiento -->
		<script is:inline>
			document.addEventListener('DOMContentLoaded', function() {
				// Inicializar funcionalidades
				setupThemeToggle();
				setupUserMenu();
				
				// Función para alternar el tema claro/oscuro
				function setupThemeToggle() {
					const themeToggle = document.getElementById('theme-toggle');
					if (themeToggle) {
						themeToggle.addEventListener('click', () => {
							const isDark = document.documentElement.classList.contains('dark');
							document.documentElement.classList.toggle('dark', !isDark);
							document.documentElement.classList.toggle('light', isDark);
							localStorage.setItem('theme', isDark ? 'light' : 'dark');
						});
					}
				}
				
				function setupUserMenu() {
					const userMenuButton = document.getElementById('user-menu-button');
					const userMenu = document.getElementById('user-menu');
					
					if (userMenuButton && userMenu) {
						userMenuButton.addEventListener('click', function() {
							userMenu.classList.toggle('hidden');
						});
						
						// Cerrar al hacer clic fuera
						document.addEventListener('click', function(event) {
							if (!userMenuButton.contains(event.target) && !userMenu.contains(event.target)) {
								userMenu.classList.add('hidden');
							}
						});
					}
				}
			});
		</script>
		
		<!-- Registro del Service Worker para soporte de PWA -->
		<script is:inline>
			// Registrar el service worker solo en producción y si está soportado
			if ('serviceWorker' in navigator && import.meta.env.PROD) {
				window.addEventListener('load', function() {
					navigator.serviceWorker.register('/sw.js')
						.then(function(registration) {
							console.log('Service Worker registrado con éxito:', registration.scope);
						})
						.catch(function(error) {
							console.log('Error al registrar el Service Worker:', error);
						});
				});
			}
		</script>
	</body>
</html>

<style is:global>
	:root {
		--color-primary: #4F46E5;
		--color-primary-dark: #4338CA;
	}
	
	:root.dark {
		--color-primary: #818CF8;
		--color-primary-dark: #6366F1;
		--dark-bg-primary: #1F2937;
		--dark-bg-secondary: #111827;
		--dark-text-primary: #F9FAFB;
		--dark-text-secondary: #D1D5DB;
		--dark-border: #374151;
	}
	
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
		font-family: var(--font-family-sans);
	}
	
	.dark .bg-gray-800 {
		background-color: var(--dark-bg-primary);
	}
	
	.dark .bg-gray-900 {
		background-color: var(--dark-bg-secondary);
	}
	
	.dark .text-gray-200 {
		color: var(--dark-text-primary);
	}
	
	.dark .text-gray-300,
	.dark .text-gray-400 {
		color: var(--dark-text-secondary);
	}
	
	.dark .text-gray-600,
	.dark .text-gray-700,
	.dark .text-gray-800 {
		color: var(--dark-text-secondary);
	}
	
	.dark h1, .dark h2, .dark h3, .dark h4, .dark h5, .dark h6 {
		color: var(--dark-text-primary);
	}
	
	.dark .border-gray-700 {
		border-color: var(--dark-border);
	}
	
	.bg-primary {
		background-color: var(--color-primary);
	}
	
	.bg-primary-dark {
		background-color: var(--color-primary-dark);
	}
	
	.text-primary {
		color: var(--color-primary);
	}
	
	.hover\:bg-primary-dark:hover {
		background-color: var(--color-primary-dark);
	}
	
	.hover\:bg-blue-600:hover {
		background-color: #2563EB;
	}
	
	/* Transiciones suaves para cambios de tema */
	.transition-colors {
		transition-property: background-color, border-color, color, fill, stroke;
		transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
	}
	
	.duration-200 {
		transition-duration: 200ms;
	}
</style>