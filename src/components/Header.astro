---
import { getSession } from '../lib/auth';
import { getProfileByUserId } from '../lib/supabase';
import type { Profile } from '../types/database.types';
import UserNavigation from './UserNavigation.astro';
import NotificationBadge from './NotificationBadge.astro';
import FormInput from './ui/FormInput.astro'; 

// Server-side authentication check
const { data: sessionData } = await getSession();
const session = sessionData?.session;

// Default user info
let profile: Profile | null = null;
let userName = "Usuario";
let userAvatar = "/avatars/default.jpg";

// Only fetch profile if there's an active session
if (session) {
  const { data: userData } = await getProfileByUserId(session.user.id);
  if (userData) {
    profile = userData;
    userName = userData.name || "Usuario";
    userAvatar = userData.avatar_url || "/avatars/default.jpg";
  }
}

// In a real app, these would come from a dedicated notifications API
// For now, we use placeholder values for demonstration
let notificationCount = 0;
let messageCount = 0;

if (session) {
  // This would be replaced with actual API calls in a production app
  // For example: const { data } = await getUnreadNotificationCount(session.user.id);
  notificationCount = profile?.user_type === 'queuer' ? 3 : 2;
  messageCount = profile?.user_type === 'queuer' ? 5 : 1;
}
---

<header class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm mb-6 flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 sm:gap-0 transition-all duration-300" role="banner">
  <!-- Mobile header with logo and user options -->
  <div class="flex items-center justify-between w-full sm:hidden">
    <div class="flex items-center">
      <div class="w-10 h-10 bg-primary rounded-lg flex items-center justify-center text-white font-bold text-xl mr-3 hover-scale" aria-hidden="true">Q</div>
      <span class="text-lg font-bold text-gray-900 dark:text-white">QueueMaster</span>
    </div>
    
    <!-- Mobile user actions -->
    <div class="flex items-center space-x-2">
      <NotificationBadge type="notification" count={notificationCount} />
      <UserNavigation session={session} userName={userName} userAvatar={userAvatar} isMobile={true} />
    </div>
  </div>
  
  <!-- Search bar - shared between mobile and desktop -->
  <div class="relative flex-1 w-full max-w-lg">
    <label for="search-input" class="sr-only">Buscar servicios, eventos o representantes</label>
    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400 dark:text-gray-300" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
      </svg>
    </div>
    <input 
      id="search-input"
      type="text" 
      placeholder="Buscar servicios, eventos, representantes..." 
      class="pl-10 pr-4 py-2 w-full border border-gray-200 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent dark:bg-gray-700 dark:text-gray-200 dark:placeholder-gray-400 focus:outline-none transition-colors duration-200"
      aria-label="Buscar servicios, eventos o representantes"
    />
  </div>
  
  <!-- Desktop user actions -->
  <div class="hidden sm:flex items-center space-x-4">
    <NotificationBadge type="notification" count={notificationCount} />
    <NotificationBadge type="message" count={messageCount} />
    
    <div class="border-l border-gray-200 dark:border-gray-700 h-6 mx-2" aria-hidden="true"></div>
    
    <UserNavigation session={session} userName={userName} userAvatar={userAvatar} />
  </div>
</header>

<script>
  import { debounce } from '../scripts/utils.js';
  
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    
    if (searchInput) {
      // Use the debounce utility from our utils file
      const handleSearch = debounce((value: string) => {
        // Implement search logic here
        console.log('Searching for:', value);
        
        // Optional: Redirect to search page on input
        // if (value.length > 2) {
        //   window.location.href = `/search?q=${encodeURIComponent(value)}`;
        // }
      }, 300);
      
      searchInput.addEventListener('input', (e) => {
        const target = e.target as HTMLInputElement;
        handleSearch(target.value);
      });
    }
  });
</script>