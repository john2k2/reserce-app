---
import Layout from '../layouts/Layout.astro';
import { supabase } from '../lib/supabase';
import { getSession, getProfileByUserId, getClientReservations } from '../lib/supabase';
import type { Profile, Reservation, ReservationStatus } from '../types/database.types';

// Verificar si el usuario está autenticado
const { data: sessionData, error: sessionError } = await getSession();
const session = sessionData?.session;

// Redireccionar si no hay sesión
if (!session) {
  return Astro.redirect('/login?redirect=/dashboard');
}

// Obtener perfil del usuario
let profile: Profile | null = null;
let error: string | null = null;
let activeReservations: Reservation[] = [];
let historyReservations: Reservation[] = [];

try {
  // Obtener perfil
  const { data: userData, error: userError } = await getProfileByUserId(session.user.id);
  
  if (userError) {
    console.error('Error al obtener perfil:', userError);
    error = 'No se pudo cargar tu perfil. Por favor, intenta de nuevo más tarde.';
  } else if (userData) {
    profile = userData;
    
    // Solo cargar reservas si es un cliente
    if (profile && profile.user_type === 'client') {
      // Obtener reservas activas (pendientes, confirmadas, en progreso)
      const { data: activeData, error: activeError } = await getClientReservations(
        profile && profile.id, 
        ['pending', 'confirmed', 'in_progress']
      );
      
      if (activeError) {
        console.error('Error al obtener reservas activas:', activeError);
      } else if (activeData) {
        activeReservations = activeData;
      }
      
      // Obtener historial de reservas (completadas, canceladas)
      const { data: historyData, error: historyError } = await getClientReservations(
        profile && profile.id, 
        ['completed', 'cancelled']
      );
      
      if (historyError) {
        console.error('Error al obtener historial de reservas:', historyError);
      } else if (historyData) {
        historyReservations = historyData;
      }
    }
  } else {
    // Si el usuario está autenticado pero no tiene perfil, redireccionar para crear perfil
    return Astro.redirect('/create-profile');
  }
} catch (e) {
  console.error('Error al procesar la solicitud:', e);
  error = 'Ha ocurrido un error al cargar los datos. Por favor, intenta de nuevo más tarde.';
}

// Formato de la fecha
function formatDate(dateString: string | null | undefined): string {
  if (!dateString) return 'Fecha no disponible';
  
  const options: Intl.DateTimeFormatOptions = { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric', 
    hour: '2-digit', 
    minute: '2-digit' 
  };
  return new Date(dateString).toLocaleDateString('es-ES', options);
}

// Color y texto según el estado de la reserva
function getStatusInfo(status: ReservationStatus | string | null | undefined): { color: string; text: string } {
  if (!status) return { color: 'gray', text: 'Desconocido' };
  
  switch (status) {
    case 'pending':
      return { color: 'yellow', text: 'Pendiente' };
    case 'confirmed':
      return { color: 'blue', text: 'Confirmada' };
    case 'in_progress':
      return { color: 'green', text: 'En progreso' };
    case 'completed':
      return { color: 'green', text: 'Completada' };
    case 'cancelled':
      return { color: 'red', text: 'Cancelada' };
    default:
      return { color: 'gray', text: status as string };
  }
}
---

<Layout title="Mi Tablero - QueueMaster">
  <div class="container mx-auto px-4 py-8">
    <!-- Barra de navegación superior -->
    <div class="mb-8 flex justify-between items-center">
      <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Mi Tablero</h1>
      
      <div class="flex space-x-4">
        <a 
          href="/" 
          class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 dark:bg-gray-700 dark:text-gray-200 dark:border-gray-600 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
          </svg>
          Inicio
        </a>
        
        <a 
          href="/api/logout" 
          class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
          </svg>
          Cerrar sesión
        </a>
      </div>
    </div>
    
    {error ? (
      <div class="bg-red-50 dark:bg-red-900/20 border-l-4 border-red-500 p-4 mb-8">
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-red-500" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.28 7.22a.75.75 0 00-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 101.06 1.06L10 11.06l1.72 1.72a.75.75 0 101.06-1.06L11.06 10l1.72-1.72a.75.75 0 00-1.06-1.06L10 8.94 8.28 7.22z" clip-rule="evenodd" />
            </svg>
          </div>
          <div class="ml-3">
            <p class="text-sm text-red-700 dark:text-red-200">{error}</p>
          </div>
        </div>
      </div>
    ) : (
      <div>
        <!-- Información de perfil -->
        <div class="flex flex-col md:flex-row items-center md:items-start gap-6 mb-8">
          <div class="w-32 h-32 rounded-full overflow-hidden bg-gray-200 dark:bg-gray-700 flex-shrink-0">
            <img 
              src={profile?.avatar_url || "/avatars/default.jpg"} 
              alt={`Foto de perfil de ${profile?.name || 'Usuario'}`} 
              class="w-full h-full object-cover"
              onerror="this.src='/avatars/default.jpg'; this.onerror=null;"
            />
          </div>
          
          <div class="text-center md:text-left">
            <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2" id="profile-name">{profile?.name}</h1>
            <p class="text-lg text-gray-600 dark:text-gray-400 mb-4" id="profile-email">{profile?.email}</p>
            
            {profile?.phone && (
              <p class="text-md text-gray-600 dark:text-gray-400 mb-2" id="profile-phone">
                <span class="font-medium">Teléfono:</span> {profile.phone}
              </p>
            )}
            
            {profile?.city && (
              <p class="text-md text-gray-600 dark:text-gray-400 mb-4" id="profile-city">
                <span class="font-medium">Ciudad:</span> {profile.city}
              </p>
            )}
            
            {profile?.user_type === 'queuer' && profile?.description && (
              <p class="text-md text-gray-600 dark:text-gray-400 mb-4" id="profile-description">
                <span class="font-medium">Descripción:</span> {profile.description}
              </p>
            )}
            
            <div class="flex flex-wrap gap-2 justify-center md:justify-start">
              <button 
                id="edit-profile-btn"
                class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
                Editar Perfil
              </button>
              
              {profile?.user_type === 'client' && (
                <a 
                  href="/queuers" 
                  class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 dark:text-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                  </svg>
                  Buscar Representantes
                </a>
              )}
            </div>
          </div>
        </div>
        
        {profile?.user_type === 'client' ? (
          <div class="space-y-8">
            <!-- Reservas activas -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
              <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Reservas Activas</h2>
              </div>
              
              {activeReservations.length > 0 ? (
                <div class="overflow-x-auto">
                  <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                    <thead class="bg-gray-50 dark:bg-gray-700">
                      <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Servicio</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Representante</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Fecha</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Estado</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Acciones</th>
                      </tr>
                    </thead>
                    <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                      {activeReservations.map((reservation) => {
                        const statusInfo = getStatusInfo(reservation.status);
                        
                        return (
                          <tr>
                            <td class="px-6 py-4 whitespace-nowrap">
                              <div class="text-sm font-medium text-gray-900 dark:text-white">{reservation.services?.name || 'Servicio no especificado'}</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                              <div class="flex items-center">
                                <div class="flex-shrink-0 h-10 w-10 rounded-full overflow-hidden bg-gray-200 dark:bg-gray-700">
                                  <img 
                                    class="h-10 w-10 object-cover" 
                                    src={reservation.profiles?.avatar_url || "/avatars/default.jpg"} 
                                    alt="" 
                                    onerror="this.src='/avatars/default.jpg'; this.onerror=null;"
                                  />
                                </div>
                                <div class="ml-4">
                                  <div class="text-sm font-medium text-gray-900 dark:text-white">{reservation.profiles?.name || 'Representante no especificado'}</div>
                                  <div class="text-sm text-gray-500 dark:text-gray-400">
                                    {reservation.profiles?.rating ? (
                                      <div class="flex items-center">
                                        <svg class="h-4 w-4 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
                                          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                                        </svg>
                                        <span class="ml-1">{reservation.profiles.rating}</span>
                                      </div>
                                    ) : (
                                      <span>Sin valoraciones</span>
                                    )}
                                  </div>
                                </div>
                              </div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                              <div class="text-sm text-gray-900 dark:text-white">{formatDate(reservation.date)}</div>
                              <div class="text-sm text-gray-500 dark:text-gray-400">{reservation.services?.name || 'Ubicación no disponible'}</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                              <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-${statusInfo.color}-100 text-${statusInfo.color}-800 dark:bg-${statusInfo.color}-900 dark:text-${statusInfo.color}-200`}>
                                {statusInfo.text}
                              </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                              <a 
                                href={`/reservation/${reservation.id}`} 
                                class="text-primary hover:text-primary-dark dark:text-blue-400 dark:hover:text-blue-300 mr-3"
                              >
                                Ver detalles
                              </a>
                              
                              {reservation.status === 'pending' && (
                                <button 
                                  class="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300"
                                  data-reservation-id={reservation.id}
                                  data-action="cancel"
                                  title={`Cancelar reserva ${reservation.id}`}
                                >
                                  Cancelar
                                </button>
                              )}
                              
                              {reservation.status === 'confirmed' && (
                                <button 
                                  class="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300"
                                  data-reservation-id={reservation.id}
                                  data-action="cancel"
                                  title={`Cancelar reserva ${reservation.id}`}
                                >
                                  Cancelar
                                </button>
                              )}
                              
                              {reservation.status === 'completed' && !reservation.client_rating && (
                                <a 
                                  href={`/rate/${reservation.id}`} 
                                  class="text-yellow-600 hover:text-yellow-800 dark:text-yellow-400 dark:hover:text-yellow-300"
                                >
                                  Valorar
                                </a>
                              )}
                            </td>
                          </tr>
                        );
                      })}
                    </tbody>
                  </table>
                </div>
              ) : (
                <div class="py-8 text-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400 dark:text-gray-500 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-1">No tienes reservas activas</h3>
                  <p class="text-gray-500 dark:text-gray-400 mb-4">Comienza buscando un representante para tus gestiones.</p>
                  <a 
                    href="/queuers" 
                    class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
                  >
                    Buscar Representantes
                  </a>
                </div>
              )}
            </div>
            
            <!-- Historial de reservas -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
              <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
                <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Historial de Reservas</h2>
                
                {historyReservations.length > 5 && (
                  <a 
                    href="/history" 
                    class="text-sm text-primary hover:text-primary-dark dark:text-blue-400 dark:hover:text-blue-300"
                  >
                    Ver todo
                  </a>
                )}
              </div>
              
              {historyReservations.length > 0 ? (
                <div class="overflow-x-auto">
                  <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                    <thead class="bg-gray-50 dark:bg-gray-700">
                      <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Servicio</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Representante</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Fecha</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Estado</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Acciones</th>
                      </tr>
                    </thead>
                    <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                      {historyReservations.slice(0, 5).map((reservation) => {
                        const statusInfo = getStatusInfo(reservation.status);
                        
                        return (
                          <tr>
                            <td class="px-6 py-4 whitespace-nowrap">
                              <div class="text-sm font-medium text-gray-900 dark:text-white">{reservation.services?.name || 'Servicio no especificado'}</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                              <div class="flex items-center">
                                <div class="flex-shrink-0 h-10 w-10 rounded-full overflow-hidden bg-gray-200 dark:bg-gray-700">
                                  <img 
                                    class="h-10 w-10 object-cover" 
                                    src={reservation.profiles?.avatar_url || "/avatars/default.jpg"} 
                                    alt="" 
                                    onerror="this.src='/avatars/default.jpg'; this.onerror=null;"
                                  />
                                </div>
                                <div class="ml-4">
                                  <div class="text-sm font-medium text-gray-900 dark:text-white">{reservation.profiles?.name || 'Representante no especificado'}</div>
                                  <div class="text-sm text-gray-500 dark:text-gray-400">
                                    {reservation.profiles?.rating ? (
                                      <div class="flex items-center">
                                        <svg class="h-4 w-4 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
                                          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                                        </svg>
                                        <span class="ml-1">{reservation.profiles.rating}</span>
                                      </div>
                                    ) : (
                                      <span>Sin valoraciones</span>
                                    )}
                                  </div>
                                </div>
                              </div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                              <div class="text-sm text-gray-900 dark:text-white">{formatDate(reservation.date)}</div>
                              <div class="text-sm text-gray-500 dark:text-gray-400">{reservation.services?.name || 'Ubicación no disponible'}</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                              <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-${statusInfo.color}-100 text-${statusInfo.color}-800 dark:bg-${statusInfo.color}-900 dark:text-${statusInfo.color}-200`}>
                                {statusInfo.text}
                              </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                              <a 
                                href={`/reservation/${reservation.id}`} 
                                class="text-primary hover:text-primary-dark dark:text-blue-400 dark:hover:text-blue-300"
                              >
                                Ver detalles
                              </a>
                            </td>
                          </tr>
                        );
                      })}
                    </tbody>
                  </table>
                </div>
              ) : (
                <div class="py-8 text-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400 dark:text-gray-500 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                  </svg>
                  <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-1">No tienes historial de reservas</h3>
                  <p class="text-gray-500 dark:text-gray-400">Tu historial aparecerá aquí una vez que hayas completado o cancelado alguna reserva.</p>
                </div>
              )}
            </div>
          </div>
        ) : (
          <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6 text-center">
            <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Vista de Representante</h2>
            <p class="text-gray-500 dark:text-gray-400 mb-6">Estás viendo el tablero como representante. Puedes gestionar tus servicios y reservas desde el tablero de representante.</p>
            <a 
              href="/queuer-dashboard" 
              class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
            >
              Ir al Tablero de Representante
            </a>
          </div>
        )}
      </div>
    )}
  </div>
  
  <!-- Modal de edición de perfil -->
  <div id="edit-profile-modal" class="fixed inset-0 bg-black bg-opacity-70 z-50 flex items-center justify-center hidden backdrop-blur-sm transition-all duration-300 ease-in-out opacity-0">
    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-2xl max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto transform scale-95 transition-all duration-300 ease-in-out">
      <div class="p-6">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-2xl font-bold text-gray-900 dark:text-white">Editar Perfil</h2>
          <button id="close-modal" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        <form id="profile-form" class="space-y-5">
          <!-- Previsualización y carga de imagen -->
          <div class="flex flex-col items-center mb-6">
            <div class="relative group cursor-pointer hover:scale-105 transition-all duration-300" id="avatar-container">
              <div class="w-32 h-32 rounded-full overflow-hidden bg-gray-200 dark:bg-gray-700 mb-3 ring-4 ring-primary/20 transition-all duration-300 hover:ring-primary/50">
                <img 
                  id="avatar-preview"
                  src={profile?.avatar_url || "/avatars/default.jpg"} 
                  alt="Avatar" 
                  class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                  onerror="this.src='/avatars/default.jpg'; this.onerror=null;"
                />
              </div>
              <div class="absolute inset-0 bg-black bg-opacity-40 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300" id="avatar-overlay">
                <div class="flex flex-col items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-white mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  <span class="text-white text-sm font-medium">Cambiar foto</span>
                </div>
              </div>
              <input 
                type="file" 
                id="avatar-upload" 
                accept="image/*" 
                class="hidden"
              />
              <input 
                type="hidden" 
                id="avatar-base64" 
                name="avatar_base64" 
              />
            </div>
            <button 
              type="button" 
              id="trigger-upload" 
              class="text-sm text-primary hover:text-primary-dark dark:text-blue-400 dark:hover:text-blue-300 font-medium mt-1 transition-colors"
            >
              Haz clic aquí para cambiar tu foto
            </button>
          </div>
          
          <div class="transition-all duration-300 ease-in-out hover:translate-y-[-2px]">
            <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Nombre completo</label>
            <input 
              type="text" 
              id="name" 
              name="name" 
              value={profile?.name || ''} 
              class="block w-full rounded-lg border-gray-300 shadow-sm focus:border-primary focus:ring-primary dark:bg-gray-700 dark:border-gray-600 dark:text-white transition-colors"
              placeholder="Tu nombre completo"
            />
          </div>
          
          <div class="transition-all duration-300 ease-in-out hover:translate-y-[-2px]">
            <label for="phone" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Teléfono</label>
            <input 
              type="tel" 
              id="phone" 
              name="phone" 
              value={profile?.phone || ''} 
              class="block w-full rounded-lg border-gray-300 shadow-sm focus:border-primary focus:ring-primary dark:bg-gray-700 dark:border-gray-600 dark:text-white transition-colors"
              placeholder="Tu número de teléfono"
            />
          </div>
          
          <div class="transition-all duration-300 ease-in-out hover:translate-y-[-2px]">
            <label for="city" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Ciudad</label>
            <input 
              type="text" 
              id="city" 
              name="city" 
              value={profile?.city || ''} 
              class="block w-full rounded-lg border-gray-300 shadow-sm focus:border-primary focus:ring-primary dark:bg-gray-700 dark:border-gray-600 dark:text-white transition-colors"
              placeholder="Tu ciudad"
            />
          </div>
          
          {profile?.user_type === 'queuer' && (
            <div class="transition-all duration-300 ease-in-out hover:translate-y-[-2px]">
              <label for="description" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Descripción</label>
              <textarea 
                id="description" 
                name="description" 
                rows="3" 
                class="block w-full rounded-lg border-gray-300 shadow-sm focus:border-primary focus:ring-primary dark:bg-gray-700 dark:border-gray-600 dark:text-white transition-colors"
                placeholder="Describe tus servicios y experiencia"
              >{profile?.description || ''}</textarea>
            </div>
          )}
          
          <!-- Mensaje de estado -->
          <div id="update-status" class="hidden py-2 px-3 rounded-lg text-sm font-medium transition-all duration-300 ease-in-out"></div>
          
          <div class="flex justify-end space-x-3 pt-4">
            <button 
              type="button" 
              id="cancel-edit" 
              class="px-4 py-2 border border-gray-300 rounded-lg shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 dark:bg-gray-700 dark:text-gray-200 dark:border-gray-600 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition-all duration-300 hover:scale-105"
            >
              Cancelar
            </button>
            <button 
              type="submit" 
              class="px-4 py-2 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-all duration-300 hover:scale-105"
            >
              Guardar Cambios
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Función para cancelar una reserva
  async function cancelReservation(reservationId) {
    if (!reservationId) {
      console.error('ID de reserva no proporcionado');
      alert('Error: No se pudo identificar la reserva a cancelar');
      return;
    }
    
    // Asegurarse de que el ID es una cadena de texto
    reservationId = String(reservationId).trim();
    
    if (!reservationId) {
      console.error('ID de reserva inválido después de convertir a string');
      alert('Error: ID de reserva inválido');
      return;
    }
    
    console.log('ID de reserva a cancelar:', reservationId);
    
    const confirmed = confirm('¿Estás seguro que deseas cancelar esta reserva?');
    if (!confirmed) return;
    
    try {
      // Mostrar indicador de carga
      const loadingMessage = document.createElement('div');
      loadingMessage.className = 'fixed top-0 left-0 w-full bg-blue-500 text-white text-center py-2 z-50';
      loadingMessage.textContent = 'Cancelando reserva...';
      document.body.appendChild(loadingMessage);
      
      console.log('Enviando solicitud para cancelar reserva:', reservationId);
      
      // Usar el nuevo endpoint específico para cancelar
      const response = await fetch(`/api/reservation/cancel`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          reservationId: reservationId
        }),
      });
      
      console.log('Respuesta recibida:', response.status);
      
      // Eliminar indicador de carga
      document.body.removeChild(loadingMessage);
      
      let data;
      try {
        data = await response.json();
        console.log('Datos de respuesta:', data);
      } catch (e) {
        console.error('Error al parsear respuesta JSON:', e);
        alert('Error al procesar la respuesta del servidor');
        return;
      }
      
      if (response.ok) {
        // Mostrar mensaje de éxito
        const successMessage = document.createElement('div');
        successMessage.className = 'fixed top-0 left-0 w-full bg-green-500 text-white text-center py-2 z-50';
        successMessage.textContent = 'Reserva cancelada con éxito';
        document.body.appendChild(successMessage);
        
        // Eliminar el mensaje después de 3 segundos
        setTimeout(() => {
          document.body.removeChild(successMessage);
          // Recargar la página para ver los cambios
          window.location.reload();
        }, 3000);
      } else {
        console.error('Error al cancelar reserva:', data);
        
        // Mostrar mensaje de error
        const errorMessage = document.createElement('div');
        errorMessage.className = 'fixed top-0 left-0 w-full bg-red-500 text-white text-center py-2 z-50';
        errorMessage.textContent = `Error al cancelar la reserva: ${data?.message || 'Se produjo un error inesperado'}`;
        document.body.appendChild(errorMessage);
        
        // Eliminar el mensaje después de 5 segundos
        setTimeout(() => {
          document.body.removeChild(errorMessage);
        }, 5000);
      }
    } catch (error) {
      console.error('Error al cancelar la reserva:', error);
      alert('Se produjo un error al cancelar la reserva. Por favor, intenta de nuevo más tarde.');
    }
  }
  
  // Agregar event listeners para los botones de cancelar
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Inicializando event listeners para botones de cancelar');
    
    const cancelButtons = document.querySelectorAll('[data-action="cancel"]');
    console.log('Botones de cancelar encontrados:', cancelButtons.length);
    
    cancelButtons.forEach(button => {
      const reservationId = button.getAttribute('data-reservation-id');
      console.log('Botón configurado para reserva ID:', reservationId);
      
      button.addEventListener('click', function() {
        const reservationId = this.getAttribute('data-reservation-id');
        console.log('Botón de cancelar clickeado para reserva:', reservationId);
        
        if (reservationId) {
          cancelReservation(reservationId);
        } else {
          console.error('No se encontró ID de reserva en el botón');
          alert('Error: No se pudo identificar la reserva a cancelar');
        }
      });
    });
  });
  
  // Funcionalidad del modal de edición de perfil
  document.addEventListener('DOMContentLoaded', function() {
    const editProfileBtn = document.getElementById('edit-profile-btn');
    const editProfileModal = document.getElementById('edit-profile-modal');
    const closeModalBtn = document.getElementById('close-modal');
    const cancelEditBtn = document.getElementById('cancel-edit');
    const profileForm = document.getElementById('profile-form') as HTMLFormElement;
    const avatarPreview = document.getElementById('avatar-preview') as HTMLImageElement;
    const avatarUpload = document.getElementById('avatar-upload') as HTMLInputElement;
    const avatarBase64Input = document.getElementById('avatar-base64') as HTMLInputElement;
    const updateStatus = document.getElementById('update-status');
    const modalContent = editProfileModal?.querySelector('.bg-white');
    const triggerUploadBtn = document.getElementById('trigger-upload');
    const avatarContainer = document.getElementById('avatar-container');
    const avatarOverlay = document.getElementById('avatar-overlay');
    
    // Configurar la carga de imágenes
    if (avatarUpload) {
      // Función para abrir el selector de archivos
      const openFileSelector = (e) => {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        console.log('Abriendo selector de archivos');
        avatarUpload.click();
      };
      
      // Asignar evento al botón explícito
      if (triggerUploadBtn) {
        triggerUploadBtn.addEventListener('click', openFileSelector);
      }
      
      // Asignar evento al contenedor de la imagen
      if (avatarContainer) {
        avatarContainer.addEventListener('click', openFileSelector);
      }
      
      // Asignar evento al overlay
      if (avatarOverlay) {
        avatarOverlay.addEventListener('click', openFileSelector);
      }
      
      // Asignar evento a la imagen directamente
      if (avatarPreview) {
        avatarPreview.addEventListener('click', openFileSelector);
      }
      
      // Verificar que el input file esté correctamente configurado
      console.log('Input file configurado:', avatarUpload.id, avatarUpload.type, avatarUpload.accept);
      
      // Manejar la selección de archivos
      avatarUpload.addEventListener('change', function(e) {
        console.log('Evento change del input file activado');
        const file = (e.target as HTMLInputElement).files?.[0];
        if (!file) {
          console.log('No se seleccionó ningún archivo');
          return;
        }
        
        console.log('Archivo seleccionado:', file.name, file.type, file.size);
        
        // Validar que sea una imagen
        if (!file.type.startsWith('image/')) {
          showUpdateStatus('Por favor, selecciona un archivo de imagen válido.', 'error');
          return;
        }
        
        // Validar tamaño (máximo 5MB)
        if (file.size > 5 * 1024 * 1024) {
          showUpdateStatus('La imagen es demasiado grande. El tamaño máximo es 5MB.', 'error');
          return;
        }
        
        // Leer y mostrar la imagen
        const reader = new FileReader();
        reader.onload = function(event) {
          console.log('Imagen cargada en FileReader');
          if (event.target && typeof event.target.result === 'string') {
            avatarPreview.src = event.target.result;
            avatarBase64Input.value = event.target.result;
            console.log('Vista previa actualizada');
            
            // Mostrar mensaje de éxito
            showUpdateStatus('Imagen cargada correctamente. No olvides guardar los cambios.', 'success');
            
            // Añadir una animación a la imagen
            avatarPreview.style.animation = 'pulse 0.5s ease-in-out';
            setTimeout(() => {
              avatarPreview.style.animation = '';
            }, 500);
          }
        };
        reader.onerror = function(error) {
          console.error('Error al leer el archivo:', error);
          showUpdateStatus('Error al procesar la imagen. Intenta con otra.', 'error');
        };
        reader.readAsDataURL(file);
      });
    }
    
    // Función para mostrar mensajes de estado
    function showUpdateStatus(message, type = 'info') {
      if (!updateStatus) return;
      
      updateStatus.textContent = message;
      updateStatus.classList.remove('hidden', 'bg-green-100', 'text-green-800', 'bg-red-100', 'text-red-800', 'bg-blue-100', 'text-blue-800');
      
      switch (type) {
        case 'success':
          updateStatus.classList.add('bg-green-100', 'text-green-800');
          break;
        case 'error':
          updateStatus.classList.add('bg-red-100', 'text-red-800');
          break;
        default:
          updateStatus.classList.add('bg-blue-100', 'text-blue-800');
      }
      
      updateStatus.classList.remove('hidden');
      
      // Añadir animación de entrada
      (updateStatus as HTMLElement).style.animation = 'fadeInUp 0.3s ease-out forwards';
    }
    
    // Abrir modal con animación
    if (editProfileBtn && editProfileModal) {
      editProfileBtn.addEventListener('click', function() {
        // Mostrar el modal pero mantenerlo invisible para la animación
        editProfileModal.classList.remove('hidden');
        
        // Forzar un reflow para que la transición funcione
        void editProfileModal.offsetWidth;
        
        // Iniciar la animación
        editProfileModal.classList.add('opacity-100');
        if (modalContent) {
          modalContent.classList.remove('scale-95');
          modalContent.classList.add('scale-100');
        }
        
        document.body.style.overflow = 'hidden'; // Prevenir scroll
        
        // Guardar la URL original de la imagen
        if (avatarPreview) {
          avatarPreview.setAttribute('data-original-src', avatarPreview.src);
        }
        
        console.log('Modal abierto');
      });
    }
    
    // Cerrar modal con animación
    const closeModal = function() {
      // Iniciar la animación de salida
      editProfileModal.classList.remove('opacity-100');
      editProfileModal.classList.add('opacity-0');
      
      if (modalContent) {
        modalContent.classList.remove('scale-100');
        modalContent.classList.add('scale-95');
      }
      
      // Esperar a que termine la animación antes de ocultar
      setTimeout(() => {
        editProfileModal.classList.add('hidden');
        document.body.style.overflow = ''; // Restaurar scroll
        
        // Resetear mensajes
        if (updateStatus) updateStatus.classList.add('hidden');
        
        // Restaurar la imagen de perfil original si se canceló
        if (avatarPreview && !profileForm.getAttribute('data-submitted')) {
          const originalSrc = avatarPreview.getAttribute('data-original-src') || '/avatars/default.jpg';
          avatarPreview.src = originalSrc;
        }
        if (avatarBase64Input && !profileForm.getAttribute('data-submitted')) {
          avatarBase64Input.value = '';
        }
        
        // Resetear el flag de envío
        if (profileForm) profileForm.removeAttribute('data-submitted');
      }, 300); // Coincidir con la duración de la transición
      
      console.log('Modal cerrado');
    };
    
    if (closeModalBtn) closeModalBtn.addEventListener('click', closeModal);
    if (cancelEditBtn) cancelEditBtn.addEventListener('click', closeModal);
    
    // Cerrar modal al hacer clic fuera
    editProfileModal.addEventListener('click', function(e) {
      if (e.target === editProfileModal) {
        closeModal();
      }
    });
    
    // Manejar envío del formulario
    if (profileForm) {
      profileForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Marcar el formulario como enviado
        profileForm.setAttribute('data-submitted', 'true');
        
        showUpdateStatus('Guardando cambios...', 'info');
        
        try {
          const formData = new FormData(profileForm);
          const profileData = Object.fromEntries(formData.entries());
          
          console.log('Enviando datos de perfil:', profileData);
          
          // Enviar datos al servidor
          const response = await fetch('/api/profile/update', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(profileData),
          });
          
          const data = await response.json();
          
          if (response.ok) {
            showUpdateStatus('¡Perfil actualizado con éxito!', 'success');
            
            // Actualizar los datos mostrados en la página sin recargar
            const nameElement = document.getElementById('profile-name');
            const phoneElement = document.getElementById('profile-phone');
            const cityElement = document.getElementById('profile-city');
            const descriptionElement = document.getElementById('profile-description');
            const profileImage = document.querySelector('.w-32.h-32.rounded-full img') as HTMLImageElement;
            
            if (nameElement && profileData.name) nameElement.textContent = String(profileData.name);
            
            // Actualizar teléfono con formato
            if (phoneElement && profileData.phone) {
              const phoneText = phoneElement.querySelector('span:first-child');
              if (phoneText) {
                phoneElement.innerHTML = `<span class="font-medium">Teléfono:</span> ${String(profileData.phone)}`;
              } else {
                phoneElement.textContent = String(profileData.phone);
              }
            }
            
            // Actualizar ciudad con formato
            if (cityElement && profileData.city) {
              const cityText = cityElement.querySelector('span:first-child');
              if (cityText) {
                cityElement.innerHTML = `<span class="font-medium">Ciudad:</span> ${String(profileData.city)}`;
              } else {
                cityElement.textContent = String(profileData.city);
              }
            }
            
            // Actualizar descripción con formato
            if (descriptionElement && profileData.description) {
              const descText = descriptionElement.querySelector('span:first-child');
              if (descText) {
                descriptionElement.innerHTML = `<span class="font-medium">Descripción:</span> ${String(profileData.description)}`;
              } else {
                descriptionElement.textContent = String(profileData.description);
              }
            }
            
            // Actualizar imagen de perfil si se cambió
            if (profileImage && data.data && data.data.avatar_url) {
              profileImage.src = data.data.avatar_url;
              
              // Añadir una pequeña animación a la imagen actualizada
              profileImage.style.animation = 'pulse 0.5s ease-in-out';
              setTimeout(() => {
                profileImage.style.animation = '';
              }, 500);
            }
            
            // Cerrar modal después de 2 segundos
            setTimeout(() => {
              closeModal();
            }, 2000);
          } else {
            showUpdateStatus(`Error: ${data?.message || 'No se pudo actualizar el perfil'}`, 'error');
          }
        } catch (error) {
          console.error('Error al actualizar perfil:', error);
          showUpdateStatus('Error de conexión. Inténtalo de nuevo.', 'error');
        }
      });
    }
  });
  
  // Añadir estilos de animación
  document.addEventListener('DOMContentLoaded', function() {
    const style = document.createElement('style');
    style.textContent = `
      @keyframes fadeInUp {
        from {
          opacity: 0;
          transform: translateY(10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
      
      @keyframes pulse {
        0% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.05);
        }
        100% {
          transform: scale(1);
        }
      }
    `;
    document.head.appendChild(style);
  });
</script> 