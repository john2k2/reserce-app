---
import AppLayout from '../layouts/AppLayout.astro';
import CurrentQueue from '../components/CurrentQueue.astro';

// Importaciones diferidas para componentes no críticos
const FeaturedQueuers = await import('../components/FeaturedQueuers.astro');
const AvailableServices = await import('../components/AvailableServices.astro');
const ReservationHistory = await import('../components/ReservationHistory.astro');
---

<AppLayout title="QueueMaster - Nunca más hagas fila">
  <!-- Fila actual - componente crítico que se carga inmediatamente -->
  <CurrentQueue />
  
  <!-- Componentes no críticos con carga diferida -->
  <FeaturedQueuers.default />
  
  <div class="space-y-6">
    <AvailableServices.default />
    <ReservationHistory.default />
  </div>
</AppLayout>

<script>
  // Script para manejar el lazy loading mediante Intersection Observer
  document.addEventListener('DOMContentLoaded', () => {
    // Observar imágenes para aplicar lazy loading
    const lazyImages = document.querySelectorAll('img[loading="lazy"]');
    
    if ('IntersectionObserver' in window) {
      const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target as HTMLImageElement;
            // Cargar la imagen cuando sea visible
            if (img.dataset.src) {
              img.src = img.dataset.src;
              img.removeAttribute('data-src');
            }
            imageObserver.unobserve(img);
          }
        });
      });
      
      lazyImages.forEach(img => {
        imageObserver.observe(img);
      });
    } else {
      // Fallback para navegadores que no soportan Intersection Observer
      lazyImages.forEach(img => {
        const imgElement = img as HTMLImageElement;
        if (imgElement.dataset.src) {
          imgElement.src = imgElement.dataset.src;
        }
      });
    }
  });
</script>