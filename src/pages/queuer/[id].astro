---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Sidebar from '../../components/Sidebar.astro';
import { supabase } from '../../lib/supabase';
import { createReservation, getCurrentUser } from '../../lib/supabase.ts';

// Interfaces para tipado
interface Reservation {
  id: string;
  date: string;
  service_id: string;
  client_rating: number;
  client_review: string;
  services: {
    name: string;
  };
}

interface Queuer {
  id: string;
  name: string;
  avatar_url: string;
  rating: number;
  completed_queues: number;
  city: string;
  rate_per_hour: number;
  description: string;
  speciality: string;
  is_verified: boolean;
  availability: string[];
  recent_reservations: Reservation[];
}

// Obtener el ID del queuer de los parámetros
const { id } = Astro.params;

// Obtener datos del representante
let queuer: Queuer | null = null;
let error: string | null = null;

try {
  // Obtener datos del perfil del representante
  const { data, error: profileError } = await supabase
    .from('profiles')
    .select('*')
    .eq('id', id)
    .eq('user_type', 'queuer')
    .single();
  
  if (profileError) {
    console.error('Error al obtener el perfil:', profileError);
    error = 'No se pudo encontrar el representante solicitado';
  } else if (!data) {
    error = 'Representante no encontrado';
  } else {
    queuer = data as Queuer;
    
    // Obtener las reservas completadas
    const { data: reservationsData, error: reservationsError } = await supabase
      .from('reservations')
      .select(`
        id,
        date,
        service_id,
        client_rating,
        client_review,
        services(name)
      `)
      .eq('queuer_id', id)
      .eq('status', 'completed')
      .order('date', { ascending: false })
      .limit(5);
    
    if (!reservationsError && reservationsData) {
      // Usar unknown como paso intermedio para la conversión de tipo
      queuer.recent_reservations = (reservationsData as unknown) as Reservation[];
    }
  }
} catch (e) {
  console.error('Error al procesar la solicitud:', e);
  error = 'Ha ocurrido un error al procesar la solicitud';
}

// Función requerida para rutas dinámicas en Astro
export function getStaticPaths() {
  return [
    { params: { id: 'Q001' } },
    { params: { id: 'Q002' } },
    { params: { id: 'Q003' } },
    { params: { id: 'Q004' } },
  ];
}

// Función auxiliar para mostrar estrellas de calificación
const renderStars = (rating: number): string[] => {
  const stars: string[] = [];
  for (let i = 1; i <= 5; i++) {
    if (i <= Math.floor(rating)) {
      stars.push("full");
    } else if (i === Math.ceil(rating) && !Number.isInteger(rating)) {
      stars.push("half");
    } else {
      stars.push("empty");
    }
  }
  return stars;
}
---

<Layout title={queuer ? `${queuer.name} - QueueMaster` : 'Representante no encontrado - QueueMaster'}>
  <div class="container mx-auto p-4">
    {error ? (
      <div class="max-w-xl mx-auto bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mt-10 text-center">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-20 w-20 mx-auto text-red-500 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
        </svg>
        <h1 class="text-2xl font-bold text-gray-800 dark:text-white mb-2">{error}</h1>
        <p class="text-gray-600 dark:text-gray-300 mb-6">Lo sentimos, no pudimos encontrar el representante que estás buscando.</p>
        <a 
          href="/queuers" 
          class="inline-flex items-center px-4 py-2 bg-primary text-white rounded-md hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
        >
          Ver todos los representantes
        </a>
      </div>
    ) : (
      <div class="max-w-4xl mx-auto">
        <!-- Encabezado del perfil -->
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden mb-6">
          <div class="relative bg-gradient-to-r from-primary to-blue-600 h-40">
            <button 
              class="absolute top-4 right-4 p-2 bg-white dark:bg-gray-800 rounded-full shadow-md focus:outline-none focus:ring-2 focus:ring-primary"
              aria-label="Volver"
              onclick="history.back()"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600 dark:text-gray-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          
          <div class="px-6 pb-6 pt-0 relative">
            <div class="flex flex-col sm:flex-row items-start sm:items-center -mt-16 sm:-mt-20">
              <div class="w-32 h-32 rounded-full overflow-hidden border-4 border-white dark:border-gray-700 bg-gray-200 dark:bg-gray-700 shadow-md">
                <img 
                  src={queuer!.avatar_url || "/avatars/default.jpg"} 
                  alt={`Foto de perfil de ${queuer!.name}`} 
                  class="w-full h-full object-cover"
                  loading="lazy"
                  width="128"
                  height="128"
                  onerror="this.src='/avatars/default.jpg'; this.onerror=null;"
                />
              </div>
              
              <div class="mt-4 sm:mt-0 sm:ml-6">
                <div class="flex flex-wrap items-center">
                  <h1 class="text-2xl font-bold text-gray-800 dark:text-white mr-3">{queuer!.name}</h1>
                  
                  {queuer!.is_verified && (
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 mb-1">
                      <svg class="-ml-0.5 mr-1.5 h-2 w-2 text-green-500" fill="currentColor" viewBox="0 0 8 8">
                        <circle cx="4" cy="4" r="3" />
                      </svg>
                      Verificado
                    </span>
                  )}
                </div>
                
                <div class="flex items-center mt-1">
                  <div class="flex items-center" aria-label={`Valoración: ${queuer!.rating || '0'} de 5 estrellas`}>
                    <span class="text-yellow-500" aria-hidden="true">
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="currentColor" stroke="none">
                        <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
                      </svg>
                    </span>
                    <span class="ml-1 text-gray-800 dark:text-gray-200">{queuer!.rating || 'Nuevo'}</span>
                  </div>
                  
                  <span class="mx-3 text-gray-500">•</span>
                  
                  <div class="flex items-center" aria-label={`${queuer!.completed_queues || '0'} servicios completados`}>
                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1 text-gray-500 dark:text-gray-400" aria-hidden="true">
                      <circle cx="12" cy="8" r="7"></circle>
                      <polyline points="8.21 13.89 7 23 12 20 17 23 15.79 13.88"></polyline>
                    </svg>
                    <span class="text-gray-600 dark:text-gray-300">{queuer!.completed_queues || '0'} servicios completados</span>
                  </div>
                </div>
                
                <div class="flex flex-wrap items-center mt-3">
                  <div class="flex items-center mr-4 mb-2" aria-label={`Ciudad: ${queuer!.city || 'No especificada'}`}>
                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1 text-gray-500 dark:text-gray-400" aria-hidden="true">
                      <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                      <circle cx="12" cy="10" r="3"></circle>
                    </svg>
                    <span class="text-gray-600 dark:text-gray-300">{queuer!.city || 'No especificada'}</span>
                  </div>
                  
                  <div class="flex items-center mb-2" aria-label={`Tarifa: $${queuer!.rate_per_hour || 'No especificada'} por hora`}>
                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1 text-gray-500 dark:text-gray-400" aria-hidden="true">
                      <circle cx="12" cy="12" r="10"></circle>
                      <line x1="12" y1="8" x2="12" y2="12"></line>
                      <line x1="12" y1="16" x2="12.01" y2="16"></line>
                    </svg>
                    <span class="text-gray-600 dark:text-gray-300">${queuer!.rate_per_hour || 'Tarifa no especificada'} por hora</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Información del representante -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          <!-- Columna izquierda -->
          <div class="md:col-span-2 space-y-6">
            <!-- Acerca de -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
              <h2 class="text-xl font-semibold text-gray-800 dark:text-white mb-4">Acerca de</h2>
              <p class="text-gray-600 dark:text-gray-300">
                {queuer!.description || 'Este representante aún no ha añadido una descripción.'}
              </p>
              
              <h3 class="text-lg font-semibold text-gray-800 dark:text-white mt-6 mb-3">Especialidades</h3>
              <div class="flex flex-wrap gap-2">
                {queuer!.speciality ? queuer!.speciality.split(',').map((speciality: string) => (
                  <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                    {speciality.trim()}
                  </span>
                )) : (
                  <span class="text-gray-500 dark:text-gray-400">No especificadas</span>
                )}
              </div>
            </div>
            
            <!-- Valoraciones y reseñas -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
              <h2 class="text-xl font-semibold text-gray-800 dark:text-white mb-4">Valoraciones y reseñas</h2>
              
              {queuer!.recent_reservations && queuer!.recent_reservations.length > 0 ? (
                <div class="space-y-4">
                  {queuer!.recent_reservations.map((reservation: Reservation) => (
                    <div class="border-b border-gray-200 dark:border-gray-700 pb-4 last:border-b-0 last:pb-0">
                      <div class="flex items-center justify-between">
                        <div class="flex items-center">
                          <div class="flex items-center" aria-label={`Valoración: ${reservation.client_rating || 'Sin valoración'} de 5 estrellas`}>
                            {[1, 2, 3, 4, 5].map((star) => (
                              <svg 
                                xmlns="http://www.w3.org/2000/svg" 
                                width="16" 
                                height="16" 
                                viewBox="0 0 24 24" 
                                fill={(reservation.client_rating >= star) ? "currentColor" : "none"} 
                                stroke="currentColor"
                                stroke-width="1.5"
                                class={`${(reservation.client_rating >= star) ? 'text-yellow-500' : 'text-gray-300 dark:text-gray-600'}`}
                              >
                                <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
                              </svg>
                            ))}
                          </div>
                          <span class="ml-2 text-sm text-gray-600 dark:text-gray-300">
                            Servicio de {reservation.services?.name || 'servicio no especificado'}
                          </span>
                        </div>
                        <span class="text-xs text-gray-500 dark:text-gray-400">
                          {new Date(reservation.date).toLocaleDateString()}
                        </span>
                      </div>
                      <p class="mt-2 text-gray-600 dark:text-gray-300 text-sm">
                        {reservation.client_review || 'Sin comentarios'}
                      </p>
                    </div>
                  ))}
                </div>
              ) : (
                <p class="text-gray-500 dark:text-gray-400">Este representante aún no tiene valoraciones.</p>
              )}
            </div>
          </div>
          
          <!-- Columna derecha -->
          <div class="space-y-6">
            <!-- Reservar servicio -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
              <h2 class="text-xl font-semibold text-gray-800 dark:text-white mb-4">Reservar servicio</h2>
              
              <form id="reservation-form" class="space-y-4">
                <input type="hidden" id="queuer-id" value={id} />
                
                <div class="space-y-2">
                  <label for="service" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Tipo de servicio</label>
                  <select
                    id="service"
                    name="service_id"
                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary dark:bg-gray-700 dark:text-white"
                    required
                  >
                    <option value="">Selecciona un servicio</option>
                    <option value="1">Trámites bancarios</option>
                    <option value="2">Eventos deportivos</option>
                    <option value="3">Conciertos</option>
                    <option value="4">Trámites gubernamentales</option>
                    <option value="5">Servicios públicos</option>
                  </select>
                </div>
                
                <div class="space-y-2">
                  <label for="date" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Fecha</label>
                  <input
                    type="date"
                    id="date"
                    name="date"
                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary dark:bg-gray-700 dark:text-white"
                    required
                    min={new Date().toISOString().split('T')[0]}
                  />
                </div>
                
                <div class="space-y-2">
                  <label for="location" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Ubicación</label>
                  <input
                    type="text"
                    id="location"
                    name="location"
                    placeholder="Dirección completa"
                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary dark:bg-gray-700 dark:text-white"
                    required
                  />
                </div>
                
                <div class="space-y-2">
                  <label for="details" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Detalles adicionales</label>
                  <textarea
                    id="details"
                    name="details"
                    rows="3"
                    placeholder="Proporciona detalles específicos sobre el servicio que necesitas"
                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary dark:bg-gray-700 dark:text-white"
                  ></textarea>
                </div>
                
                <div id="reservation-error" class="text-red-500 text-sm hidden"></div>
                
                <div class="pt-4">
                  <button
                    type="submit"
                    class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
                  >
                    Solicitar Reserva
                  </button>
                </div>
              </form>
            </div>
            
            <!-- Disponibilidad -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
              <h2 class="text-xl font-semibold text-gray-800 dark:text-white mb-4">Disponibilidad</h2>
              
              {queuer!.availability && queuer!.availability.length > 0 ? (
                <ul class="space-y-2">
                  {queuer!.availability.map((day: string) => (
                    <li class="flex items-center text-gray-600 dark:text-gray-300">
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2 text-green-500" aria-hidden="true">
                        <polyline points="20 6 9 17 4 12"></polyline>
                      </svg>
                      {day}
                    </li>
                  ))}
                </ul>
              ) : (
                <p class="text-gray-500 dark:text-gray-400">Información de disponibilidad no especificada.</p>
              )}
            </div>
            
            <!-- Contacto -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
              <h2 class="text-xl font-semibold text-gray-800 dark:text-white mb-4">Contacto</h2>
              
              <button 
                id="contact-btn"
                class="w-full flex justify-center items-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2" aria-hidden="true">
                  <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
                </svg>
                Contactar por WhatsApp
              </button>
              
              <p class="mt-4 text-xs text-gray-500 dark:text-gray-400 text-center">
                O envía un mensaje directo a través de la plataforma después de iniciar sesión.
              </p>
            </div>
          </div>
        </div>
      </div>
    )}
  </div>
</Layout>

<script>
  import { supabase } from '../../lib/supabase';
  import { createReservation, getCurrentUser } from '../../lib/supabase.ts';
  
  document.addEventListener('DOMContentLoaded', function() {
    const reservationForm = document.getElementById('reservation-form') as HTMLFormElement;
    const errorMessage = document.getElementById('reservation-error');
    const contactBtn = document.getElementById('contact-btn');
    
    // Manejar envío del formulario de reserva
    reservationForm?.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      if (errorMessage) {
        errorMessage.textContent = '';
        errorMessage.classList.add('hidden');
      }
      
      try {
        // Verificar si el usuario está autenticado
        const { data: userData, error: userError } = await getCurrentUser();
        
        if (userError || !userData || !userData.user) {
          if (errorMessage) {
            errorMessage.textContent = 'Debes iniciar sesión para realizar una reserva';
            errorMessage.classList.remove('hidden');
          }
          // Redirigir al inicio de sesión después de un retraso
          setTimeout(() => {
            window.location.href = '/login?redirect=' + encodeURIComponent(window.location.pathname);
          }, 2000);
          return;
        }
        
        // Obtener datos del formulario
        const formData = new FormData(reservationForm);
        const queuerId = document.getElementById('queuer-id')?.getAttribute('value');
        
        // Obtener el perfil del usuario actual
        const { data: profileData, error: profileError } = await supabase
          .from('profiles')
          .select('id')
          .eq('user_id', userData.user.id)
          .single();
        
        if (profileError || !profileData) {
          throw new Error('No se pudo obtener el perfil del usuario');
        }
        
        // Crear objeto de reserva
        const reservationData = {
          client_id: profileData.id,
          queuer_id: queuerId,
          service_id: formData.get('service_id'),
          date: formData.get('date'),
          location: formData.get('location'),
          details: formData.get('details') || '',
          status: 'pending'
        };
        
        // Enviar solicitud de reserva
        const response = await fetch('/api/reservations', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(reservationData),
        });
        
        const data = await response.json();
        
        if (response.ok) {
          // Mostrar mensaje de éxito y redirigir
          alert('Reserva solicitada correctamente. El representante confirmará tu solicitud pronto.');
          window.location.href = '/dashboard';
        } else {
          if (errorMessage) {
            errorMessage.textContent = data.message || 'Error al crear la reserva';
            errorMessage.classList.remove('hidden');
          }
        }
      } catch (error) {
        console.error('Error al procesar la reserva:', error);
        
        if (errorMessage) {
          errorMessage.textContent = 'Ha ocurrido un error al procesar la reserva. Por favor, inténtalo de nuevo.';
          errorMessage.classList.remove('hidden');
        }
      }
    });
    
    // Manejar clic en botón de contacto
    contactBtn?.addEventListener('click', function() {
      // Aquí podrías abrir WhatsApp o un modal para contacto
      // Por ahora simplemente mostraremos un mensaje
      alert('Esta funcionalidad estará disponible próximamente. Por favor, realiza una reserva para contactar con el representante.');
    });
  });
</script> 